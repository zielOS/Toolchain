# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>

pkgname=('llvm' 'llvm-libs')
pkgdesc="LLVM Toolchain with clang, clang-tools-extra, compiler-rt, openmp, polly, lldb, lld"
pkgver=15.0.7
pkgrel=3
arch=('x86_64')
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
provides=('aur-llvm-git' 'compiler-rt-git' 'clang-git' 'lldb-git' 'lld-git' 'polly-git' 'aur-llvm-libs-git' 
		  'llvm-libs' 'polly-git' 'openmp-git' 'mlir-git' 'pstl-git'
		  'llvm' 'compiler-rt' 'clang' 'lldb' 'polly' 'lld' 'openmp' 'pstl' 'mlir' 'libc++' 'libc++abi' 'libc++experimental')
# A package always provides itself, so there's no need to provide llvm-git
conflicts=('llvm-git' 'compiler-rt' 'clang' 'lldb' 'polly' 'lld' 'llvm-libs' 'openmp' 'pstl' 'mlir' 'libc++abi' 'libc++experimental' 'libc++')
depends=('libelf' 'libffi' 'libedit' 'libxml2' 'ncurses')
makedepends=(
    'git' 'ninja' 'cmake'
    'python-setuptools' 'python-psutil' 'python-sphinx'
    'python-recommonmark' 'clang' 'lld' 'llvm-libs' 'llvm' 'mold'
)
makedepends_x86_64=('lib32-gcc-libs')
options=('staticlibs' '!lto' '!debug') # Getting thousands of test failures with LTO
_source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver
source=($_source_base/llvm-$pkgver.src.tar.xz{,.sig}
        $_source_base/cmake-$pkgver.src.tar.xz{,.sig}
        llvm-config.h
        improve-kernel-compile.patch
)

sha256sums=('4ad8b2cc8003c86d0078d15d987d84e3a739f24aae9033865c027abae93ee7a4'
            'SKIP'
            '8986f29b634fdaa9862eedda78513969fe9788301c9f2d938f4c10a3e7a3e7ea'
            'SKIP'
            '597dc5968c695bbdbb0eac9e8eb5117fcd2773bc91edf5ec103ecffffab8bc48'
            '593ed385298623711070dffce9225cb448dfc29f30c9d950887882b19bd124fb')

validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A'  # Tom Stellard <tstellar@redhat.com>
              'D574BD5D1D0E98895E3BF90044F2485E45D59042') # Tobias Hieta <tobias@hieta.se>

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
  local target
  ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
    case $target in
      llvm-libraries|distribution)
        continue
        ;;
      # shared libraries
      LLVM|LLVMgold)
        ;;
      # libraries needed for clang-tblgen
      LLVMDemangle|LLVMSupport|LLVMTableGen)
        ;;
      # exclude static libraries
      LLVM*)
        continue
        ;;
      # exclude llvm-exegesis (doesn't seem useful without libpfm)
      llvm-exegesis)
        continue
        ;;
    esac
    echo $target
  done
}

_rpatch() {

    echo -e "\E[1;33m Revert patch: ${1}\E[0m"
    patch --forward --reverse --strip=1 --input="${srcdir:?}/${1}"

}

_patch() {

    echo -e "\E[1;33m Apply patch: ${1}\E[0m"
    patch --forward --strip=1 --input="${srcdir:?}/${1}"

}

prepare() {
  mv cmake{-$pkgver.src,}
  cd llvm-$pkgver.src

  _patch improve-kernel-compile.patch

  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py

  mkdir build
}

build() {
  cd llvm-$pkgver.src/build

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]"; then
    export CC=clang
    export CXX=clang++
    export AR=llvm-ar
    export AS=llvm-as
    export NM=llvm-nm
    export STRIP=llvm-strip
    export OBJCOPY=llvm-objcopy
    export OBJDUMP=llvm-objdump
    export READELF=llvm-readelf
    export HOSTCC=clang
    export HOSTCXX=clang++
    export HOSTAR=llvm-ar
    export DEBUG_CFLAGS="-g"
    export DEBUG_CXXFLAGS="-g"
    _extra_build_flags+=(
      -DCMAKE_C_COMPILER=clang
      -DCMAKE_CXX_COMPILER=clang++
    )
  else
    echo -e "\E[1;31mClang not found. Will use default system compiler! \E[0m"
  fi

  if ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    export LD=ld.mold
    export CC_LD=mold
    export CXX_LD=mold
    export HOSTLD=ld.mold
    _extra_build_flags+=(-DLLVM_USE_LINKER=mold)
  fi



  cmake -S llvm -B build -G Ninja \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DLLVM_BINUTILS_INCDIR=/usr/include \
        -DLLVM_HOST_TRIPLE="${CHOST:?}" \
        -DLLVM_BUILD_RUNTIME=ON \
        -DLLVM_BUILD_LLVM_DYLIB=ON \
        -DLLVM_LINK_LLVM_DYLIB=ON \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLVM_INSTALL_UTILS=ON \
        -DLLVM_ENABLE_RTTI=ON \
        -DLLVM_BUILD_DOCS=OFF \
        -DLLVM_ENABLE_FFI=ON \
        -DLLVM_ENABLE_BINDINGS=OFF \
        -DLLVM_POLLY_LINK_INTO_TOOLS=ON \
        -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb;mlir;polly;pstl;bolt" \
        -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;openmp;compiler-rt" \
        -DCLANG_LINK_CLANG_DYLIB=ON \
        -DLLDB_USE_SYSTEM_SIX=1 \
        -DLIBOMP_INSTALL_ALIASES=OFF \
        -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
        -DPOLLY_ENABLE_GPGPU_CODEGEN=ON \
        -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
        "${_extra_build_flags[@]}"

  ninja -C build

}

_python_optimize() {
    python -m compileall "$@"
    python -O -m compileall "$@"
    python -OO -m compileall "$@"
}

check() {
  cd llvm-$pkgver.src/build
  LD_LIBRARY_PATH=$PWD/lib ninja check
}

package_llvm() {
  pkgdesc="Compiler infrastructure"
  depends=('llvm-libs' 'perl')

  cd llvm-$pkgver.src/build

  DESTDIR="$pkgdir" ninja install-distribution

  # Include lit for running lit-based tests in other projects
  pushd ../utils/lit
  python3 setup.py install --root="$pkgdir" -O1
  popd

  # The runtime libraries go into llvm-libs
  mv -f "$pkgdir"/usr/lib/lib{LLVM,LTO,Remarks}*.so* "$srcdir"
  mv -f "$pkgdir"/usr/lib/LLVMgold.so "$srcdir"

  if [[ $CARCH == x86_64 ]]; then
    # Needed for multilib (https://bugs.archlinux.org/task/29951)
    # Header stub is taken from Fedora
    mv "$pkgdir/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "$srcdir/llvm-config.h" "$pkgdir/usr/include/llvm/Config/llvm-config.h"
  fi

  # Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/llvm/html/{_sources,.buildinfo}

  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm-libs() {
  pkgdesc="LLVM runtime libraries"
  depends=('gcc-libs' 'zlib' 'zstd' 'libffi' 'libedit' 'ncurses' 'libxml2')

  install -d "$pkgdir/usr/lib"
  cp -P \
    "$srcdir"/lib{LLVM,LTO,Remarks}*.so* \
    "$srcdir"/LLVMgold.so \
    "$pkgdir/usr/lib/"

  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  # https://bugs.archlinux.org/task/28479
  install -d "$pkgdir/usr/lib/bfd-plugins"
  ln -s ../LLVMgold.so "$pkgdir/usr/lib/bfd-plugins/LLVMgold.so"

  install -Dm644 "$srcdir/llvm-$pkgver.src/LICENSE.TXT" \
    "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

# vim:set ts=2 sw=2 et:
